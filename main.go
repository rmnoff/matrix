package main

import (
  "flag"
  "log"
  "fmt"
  "time"
  "strconv"
  "strings"

  // "database/sql"

  "github.com/valyala/fasthttp"
  // _ "github.com/jackc/pgx"
  // "github.com/jmoiron/sqlx"
)

var (
  addr = flag.String("addr", ":8080", "TCP address to listen to")
)

var schema = `
CREATE TABLE IF NOT EXISTS prediction (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  content TEXT,
  edited DATE,
  created DATE
);

CREATE TABLE IF NOT EXISTS checks (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  firstname VARCHAR(255),
  lastname VARCHAR(255),
  birthdate TEXT,
  owner_id INT
);

CREATE TABLE IF NOT EXISTS predictionRel (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  prediction_id INT,
  combination VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS user (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email VARCHAR(255),
  firstname VARCHAR(255),
  lastname VARCHAR(255),
  password TEXT,
  birthdate TEXT,
  gender BOOLEAN
);`

func countBD(bd string) []int {
  i, err := strconv.ParseInt(bd, 10, 64)
  if err != nil {
    log.Print(err)
  }
  tm := time.Unix(i, 0).String()
  UNIXsplit := strings.Split(tm, " ")
  date := UNIXsplit[0]
  dateSplit := strings.Split(date, "-")
  daySplit, yearSplit := strings.Split(dateSplit[2],""), strings.Split(dateSplit[0],"")
  parsedDayOne, err := strconv.ParseInt(daySplit[0], 10, 64)
  if err != nil {
    log.Print(err)
  }
  parsedDayTwo, err := strconv.ParseInt(daySplit[1], 10, 64)
  if err != nil {
    log.Print(err)
  }
  parsedYearOne, err := strconv.ParseInt(yearSplit[0], 10, 64)
  if err != nil {
    log.Print(err)
  }
  parsedYearTwo, err := strconv.ParseInt(yearSplit[1], 10, 64)
  if err != nil {
    log.Print(err)
  }
  parsedYearThree, err := strconv.ParseInt(yearSplit[2], 10, 64)
  if err != nil {
    log.Print(err)
  }
  parsedYearFour, err := strconv.ParseInt(yearSplit[3], 10, 64)
  if err != nil {
    log.Print(err)
  }
  var probDay, _ = strconv.ParseInt(dateSplit[2], 10, 64)
  var probMonth, _ = strconv.ParseInt(dateSplit[1], 10, 64)
  daySum := probDay
  if probDay > 22 {
    daySum = parsedDayOne + parsedDayTwo
  }
  monthSum := probMonth
  yearSum := parsedYearOne + parsedYearTwo + parsedYearThree + parsedYearFour
  // combo := fmt.Sprintf("%d-%d-%d", daySum, monthSum, yearSum)
  return []int{int(daySum), int(monthSum), int(yearSum)}
}

func main() {
  flag.Parse()

  handler := requestHandler

  combo := countBD("834883200")

  fmt.Println(combo)

  if err := fasthttp.ListenAndServe(*addr, handler); err != nil {
    log.Fatalf("Error in ListenAndServe: %s", err)
  }
}

func requestHandler(ctx *fasthttp.RequestCtx) {
  fmt.Fprintf(ctx, "Hello, world\n\n")
}
